# Process this file with autoconf to produce a configure script.

# Set various version strings
m4_define([opencv_major_version],    [1])
m4_define([opencv_minor_version],    [0])
m4_define([opencv_subminor_version], [0])
m4_define([opencv_version],          [opencv_major_version.opencv_minor_version.opencv_subminor_version])

# Before making a release, the LT_VERSION string should be modified.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to C:R+1:A
m4_define([opencv_lt_version],       [1:0:0])

# init autotools
AC_PREREQ(2.59)
AC_INIT([opencv],[opencv_version],[opencvlibrary-devel@lists.sourceforge.net])
AC_CONFIG_SRCDIR([opencv.pc.in])
AC_CONFIG_AUX_DIR([autotools])
AC_CONFIG_MACRO_DIR([autotools/aclocal])

# put CVS revision of this configure.in into the resulting configure script
AC_REVISION($Revision: 1.39 $)

# Detect the canonical host and target build environment
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# setup automake - we need >= 1.6 because of python and aclocal support
#                  we updated to 1.9 because of cross-platform issues
AM_CONFIG_HEADER([cvconfig.h])
AM_INIT_AUTOMAKE([1.9])
AC_PROG_MAKE_SET

# use 'gly maintainer-mode flag to help CVS users that do not want to
# help developing OpenCV but just need to compile the latest version
# AM_MAINTAINER_MODE

# substitute versionnumbers
AC_SUBST(MMAJOR,     [opencv_major_version])
AC_SUBST(MMINOR,     [opencv_minor_version])
AC_SUBST(MSUBMINOR,  [opencv_subminor_version])
AC_SUBST(VERSION,    [opencv_version])
AC_SUBST(LT_VERSION, [opencv_lt_version])

# disable building static libraries,
# allow Cygwin to build DLLs
AC_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL

# does the user want to build universal binaries on Mac OS X?
# AC_ARG_ENABLE([universal-build],
#               AS_HELP_STRING([--enable-universal-build],
#                              [build universal binaries on Mac OS X (default is YES)]),
#               [ac_cv_universal_build=$enableval],
#               [ac_cv_universal_build=yes])

# disable dependency tracking when building universal binaries on Mac OS X
# (this has to be done before the program checks)
# if test x"$ac_cv_universal_build" = xyes; then
#     enable_dependency_tracking=no
# fi

# checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LIBTOOL
# AC_SUBST(LD)
# AC_SUBST(CXXLD)

######################################################################
# the following interpret 'with' and 'enable' switches.
# some of these switches trigger checks that can be found further 
# below in this configure script

# does the user want aggressive optimization?
AC_ARG_ENABLE([debug],
              [AS_HELP_STRING([--enable-debug],[build debug version without optimization])],
              [debug=$enableval], 
              [debug=no])

# does the user want to build demo applications?
AC_ARG_ENABLE([apps],
              [AS_HELP_STRING([--enable-apps],[build demo applications])],
              [enable_apps=$enableval],
              [enable_apps="yes"])
AM_CONDITIONAL([BUILD_APPS], [test x"$enable_apps" = x"yes"])


# the following checks reflect the dependencies of OpenCV on other
# libraries that do the actual work for video I/O or windowing 
# subsystem. On some platforms there are ambiguities that a user
# can influence. There is also additional logic to be found in code
# later code lines that tries to do sensible decisions on what to use

# does the user want to compile python modules as well?
AC_ARG_WITH([swig], 
            [AS_HELP_STRING([--with-swig],[use swig wrapper generator])],
            [with_swig=$withval],
            [with_swig=no])

# does the user want to compile python modules as well?
AC_ARG_WITH([python], 
            [AS_HELP_STRING([--with-python],[use python for wrapping])],
            [with_python=$withval],
            [with_python=yes])

# does the user want OpenCV to use xine video libraries?
AC_ARG_WITH([xine],
            [AS_HELP_STRING([--with-xine],[use xine libraries (see LICENSE)])],
            [with_xine=$withval],
            [with_xine=no])

# does the user want OpenCV to use ffmpeg video libraries?
AC_ARG_WITH([ffmpeg],
            [AS_HELP_STRING([--with-ffmpeg],[use ffmpeg libraries (see LICENSE)])],
            [with_ffmpeg=$withval],
            [with_ffmpeg=auto])

# does the user want OpenCV to use libraw1394/libdc1394 for video input?
AC_ARG_WITH([1394libs],
            [AS_HELP_STRING([--with-1394libs],[use libraw1394/libdc1394])],
            [with_1394libs=$withval],
            [with_1394libs=auto])

# does the user want OpenCV to use the video4linux kernel module?
AC_ARG_WITH([v4l],
            [AS_HELP_STRING([--with-v4l],[use video4linux])],
            [with_v4l=$withval],
            [with_v4l=auto])

# does the user want OpenCV to use QuickTime video libraries?
AC_ARG_WITH([quicktime],
            [AS_HELP_STRING([--with-quicktime],[use QuickTime libraries])],
            [with_quicktime=$withval],
            [with_quicktime=yes])

# does the user want OpenCV to use the Carbon GUI of Mac OS X?
AC_ARG_WITH([carbon],
            [AS_HELP_STRING([--with-carbon],[use Carbon windows])],
            [with_carbon=$withval],
            [with_carbon=yes])

# does the user want OpenCV to use GTK+ 2.0 for the GUI?
AC_ARG_WITH([gtk],
            [AS_HELP_STRING([--with-gtk],[use gtk+ 2.0 windows])],
            [with_gtk=$withval],
            [with_gtk=auto])


######################################################################
# getting the code to compile

# cure annoying default arguments for CFLAGS and CXXFLAGS
# that autoconf automatically sets in GNU environments if
# no CFLAGS or CXXFLAGS were manually given
if test x"$CFLAGS" = "x-g -O2" ; then
    CFLAGS=""
fi
if test x"$CXXFLAGS" = "x-g -O2" ; then
    CXXFLAGS=""
fi

# see if the user wants to build universal binaries on Mac OS X
case $host in
    *-*-darwin*)
#        AC_MSG_CHECKING([whether we are building universal binaries])
#        if test x"$ac_cv_universal_build" = xyes; then
#            CFLAGS="$CFLAGS -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386"
#            CXXFLAGS="$CXXFLAGS -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386"
#            AC_DEFINE([OPENCV_UNIVERSAL_BUILD], [], [Define when building universal binaries on Mac OS X])
#        fi
#        AC_MSG_RESULT([$ac_cv_universal_build])
        ;;
    *)
        ;;
esac

# see if the user wants aggressive optimizations of the code,
# check whether to include debugging code
AC_MSG_CHECKING([whether to build debug version (no optimization)])
if test x"$debug" = "xyes"; then
    AC_MSG_RESULT([yes])
    if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
        CPPFLAGS="-DDEBUG -D_DEBUG $CPPFLAGS"
        CXXFLAGS="-ggdb -O0 $CXXFLAGS"
    fi
else
    AC_MSG_RESULT([no])
    AC_MSG_NOTICE( TARGET=$target )
    case $target in
    i*86-apple-*)
        if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
            # apples g++ fails with '-march=i686' and there are no apple machines older than prescott/core anyway
            CXXFLAGS="-g -march=prescott -ffast-math -fomit-frame-pointer $CXXFLAGS"
        fi
        ;;
    i686-*-*)
        if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
          # default to i686/pentiumpro -- people can override this
          CXXFLAGS="-g -march=i686 -ffast-math -fomit-frame-pointer $CXXFLAGS"
        fi
        ;;
    powerpc-*-*)
        if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
            # default to G3 processors -- people can override this
            CXXFLAGS="-g -mcpu=G3 -mtune=G5 -fomit-frame-pointer $CXXFLAGS"
        fi
        ;;
    *-*-*)
        if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
            CXXFLAGS="-fomit-frame-pointer $CXXFLAGS"
        fi
        ;;
    esac
    
    CPPFLAGS="-DNDEBUG $CPPFLAGS"
    CXXFLAGS="-O3 $CXXFLAGS"
fi

if test x"$ac_cv_c_compiler_gnu" = "xyes"; then
    CXXFLAGS="-Wall -fno-rtti -pipe $CXXFLAGS"
fi

# add libm because it is used by several libraries and OpenCV itself 
AC_CHECK_LIB(m,pow)
AC_CHECK_LIB(dl,dlopen)
AC_CHECK_LIB(pthread,pthread_create)

# check endianness
AC_C_BIGENDIAN

# check for specific functions that might be missing from
# certain standard library implementations
AC_FUNC_ALLOCA
AC_CHECK_HEADERS([malloc.h])
AC_CHECK_FUNCS(lrint)


######################################################################
# HighGUI dependencies for windowing system

# honor user selection, 
# if no selection given check for Carbon first
CARBON_CFLAGS=""
CARBON_LIBS=""
if test x"$with_carbon" = "xyes"; then

    # header presence and usability seem to be enough
    AC_CHECK_HEADER([Carbon/Carbon.h],
                    [
                      AC_DEFINE(HAVE_CARBON,,[Carbon windowing environment])
                      CARBON_LIBS="-Xlinker -framework -Xlinker Carbon"
                      have_carbon=yes
                    ],
                    [
                      have_carbon=no 
                      with_carbon=no
                    ])

    # sanity checks
    if test x"$have_carbon" = "xyes"; then
    
        # if we asked for gtk, this is not ok
        if test x"$with_gtk" = "xyes"; then
            AC_MSG_ERROR([You cannot specify --with-carbon and --with-gtk at the same time])
        fi

        # don't check alternatives if carbon was found
        if test x"$with_gtk" = "xauto"; then
            with_gtk=no
        fi
    fi
else
    have_carbon=no
    if test ! x"$with_carbon" = "xno"; then
        AC_MSG_WARN([unexpected arguments for option --with-carbon, continuing assuming 'no'])
    fi
fi
AC_SUBST(CARBON_CFLAGS)
AC_SUBST(CARBON_LIBS)
AM_CONDITIONAL([BUILD_CARBON], [test x"$have_carbon" = "xyes"])

# use GTK+ 2.x (or later) for windowing 
# if carbon not present or not wanted (--without-carbon)
GTK_CFLAGS=""
GTK_LIBS=""
GTHREAD_CFLAGS=""
GTHREAD_LIBS=""
if test x"$with_gtk" = "xno"; then
    have_gtk=no
    have_gthread=no
else

    # check if ./configure arguments are valid
    if test x"$with_gtk" = "xauto"; then
       with_gtk=yes
    fi
    if test x"$with_gtk" = "xyes"; then
    
        # pkg-config is needed for GTK+
        AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
        if test x"$PKG_CONFIG" == "xno"; then
            AC_MSG_ERROR([You have to install pkg-config to compile OpenCV with GTK+])
        fi
    
        PKG_CHECK_MODULES(GTK, "gtk+-2.0 gdk-pixbuf-2.0", 
                          [
                            have_gtk=yes 
                            AC_DEFINE(HAVE_GTK,,[GTK+ 2.x toolkit])
                          ],
                          [ have_gtk=no ])
    
        PKG_CHECK_MODULES(GTHREAD, "gthread-2.0",
                          [
                            have_gthread=yes
                            AC_DEFINE(HAVE_GTHREAD,,[GTK+ 2.0 Thread support])
                          ],
                          [ have_gthread=no ])
    else
        # if we get here then --with-gtk was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-gtk, continuing assuming 'no'])
        have_gtk=no
        have_gthread=no
    fi
fi
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTHREAD_CFLAGS)
AC_SUBST(GTHREAD_LIBS)
AM_CONDITIONAL([BUILD_GTK], [test x"$have_gtk" = "xyes"])


######################################################################
# HighGUI dependencies for video I/O

# if QuickTime is present, it will override everything else,
# (unless '--without-quicktime' was given)
if test x"$with_quicktime" = "xyes"; then

    # check other ./configure flags
    if test x"$with_ffmpeg" = "xyes"; then
        AC_MSG_ERROR([You cannot specify --with-quicktime and --with-ffmpeg at the same time])
    fi
    if test x"$with_xine" = "xyes"; then
        AC_MSG_ERROR([You cannot specify --with-quicktime and --with-xine at the same time])
    fi
    if test x"$with_1394libs" = "xyes"; then
        AC_MSG_ERROR([You cannot specify --with-quicktime and --with-1394libs at the same time])
    fi
    if test x"$with_v4l" = "xyes"; then
        AC_MSG_ERROR([You cannot specify --with-quicktime and --with-v4l at the same time])
    fi
    
    # header presence and usability seem to be enough
    AC_CHECK_HEADER([QuickTime/QuickTime.h],
                    [
                      AC_DEFINE(HAVE_QUICKTIME,,[QuickTime video libraries])
                      have_quicktime=yes
                    ],
                    [ have_quicktime=no ])
    
    # specify quicktime libraries
    if test x"$have_quicktime" = "xyes"; then
        QUICKTIME_LIBS="-Xlinker -framework -Xlinker QuickTime -Xlinker -framework -Xlinker QuartzCore"
 
        # don't check alternatives if quicktime was found
        if test x"$with_ffmpeg" = "xauto"; then
            with_ffmpeg=no
        fi
        if test x"$with_xine" = "xauto"; then
            with_xine=no
        fi
        if test x"$with_1394libs" = "xauto"; then
            with_1394libs=no
        fi
        if test x"$with_v4l" = "xauto"; then
            with_v4l=no
        fi
    fi
else
    # check if ./configure arguments are valid
    have_quicktime=no
    if test ! x"$with_quicktime" = "xno"; then
        AC_MSG_WARN([unexpected arguments for option --with-quicktime, continuing assuming 'no'])
    fi
fi
AC_SUBST(QUICKTIME_CFLAGS)
AC_SUBST(QUICKTIME_LIBS)
AM_CONDITIONAL([BUILD_QUICKTIME], [test x"$have_quicktime" = "xyes"])

# prefer XINE over FFMPEG for video reading because it is quick, has a cleaner API
# and allows for easy seeking with some formats
if test x"$with_xine" = "xno"; then
    have_xine=no
    # XINE_LIBS=""
else

    # check if ./configure arguments are valid
    if test x"$with_xine" = "xauto"; then
       with_xine=yes
    fi
    if test x"$with_xine" = "xyes"; then
        AC_CHECK_HEADER(xine.h,
                        AC_CHECK_LIB(xine, xine_init,
                                    [
                                      have_xine=yes
                                      AC_DEFINE(HAVE_XINE,,[Xine video library])
                                      XINE_LIBS="-lxine"
                                    ],
                                    [ have_xine=no ]),
                        [ have_xine=no ])
    else
        # if we get here then --with-xine was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-xine, continuing assuming 'no'])
        have_xine=no
    fi
fi
AC_SUBST(XINE_LIBS)
AM_CONDITIONAL([BUILD_XINE], [test x"$have_xine" = "xyes"])

# unfortunately, xine does not feature video writing,
# so we have to resort to FFMPEG here
if test x"$with_ffmpeg" = "xno"; then
    have_ffmpeg=no
    # FFMPEGLIBS=""
else

    # check if ./configure arguments are valid
    if test x"$with_ffmpeg" = "xauto"; then
       with_ffmpeg=yes
    fi
    if test x"$with_ffmpeg" = "xyes"; then
        AC_CHECK_HEADER(ffmpeg/avcodec.h,
                        AC_CHECK_LIB(avcodec, avcodec_decode_video,
                                     [
                                       AC_CHECK_LIB(avformat, av_open_input_file,
                                                    [
                                                      have_ffmpeg=yes
                                                      AC_DEFINE(HAVE_FFMPEG,,[FFMpeg video library])
                                                      FFMPEGLIBS="-lavcodec -lavformat"
                                                    ],
                                                    [ have_ffmpeg=no ],
                                                    [-lavcodec])
                                     ],
                                     [ have_ffmpeg=no ]),
                        [ have_ffmpeg=no ])
    else
        # if we get here then --with-ffmpeg was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-ffmpeg, continuing assuming 'no'])
        have_ffmpeg=no
    fi
fi
AC_SUBST(FFMPEGLIBS)
AM_CONDITIONAL([BUILD_FFMPEG], [test x"$have_ffmpeg" = "xyes"])

# IEEE1394 / FireWire video video i/o with libdc1394, libraw1394
# (can be managed by QuickTime as well)
if test x"$with_1394libs" = "xno"; then
    have_raw1394=no
    have_dc1394=no
    # IEEE1394LIBS=""
else

    # check if ./configure arguments are valid
    if test x"$with_1394libs" = "xauto"; then
       with_1394libs=yes
    fi
    if test x"$with_1394libs" = "xyes"; then
    
        SAVELIBS="$LIBS"
        have_raw1394=no
        have_dc1394=no
        
        AC_CHECK_HEADER(libraw1394/raw1394.h,
                        AC_CHECK_LIB(raw1394, raw1394_new_handle, 
                                     [
                                       have_raw1394=yes
                                       LIBS="-lm -lraw1394 $LIBS"
                                     ]))
        
        if test x"$have_raw1394" = "xyes"; then
            AC_CHECK_HEADER(libdc1394/dc1394_control.h,
                            AC_CHECK_LIB(dc1394_control, dc1394_camera_on, 
                                         [
                                           have_dc1394=yes
                                           AC_DEFINE(HAVE_DC1394,,[IEEE1394 capturing support])
                                           AC_EGREP_HEADER(do_extra_buffering, libdc1394/dc1394_control.h,
                                                           [AC_DEFINE(HAVE_DC1394_095,,[libdc1394 0.9.4 or 0.9.5])])
                                           IEEE1394LIBS="-lm -lraw1394 -ldc1394_control"
                                         ]))
        fi
        
        LIBS="$SAVELIBS"
    else
        # if we get here then --with-1394libs was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-1394libs, continuing assuming 'no'])
        have_dc1394=no
    fi
fi
AC_SUBST(IEEE1394LIBS)
AM_CONDITIONAL([BUILD_DC1394], [test x"$have_dc1394" = "xyes"])

# Video for Linux (V4L) 
# we support version 1 and 2 currently
if test x"$with_v4l" = "xno"; then
    have_v4l=no
    have_v4l2=no
    have_v4l1or2=no
else
    # check if ./configure arguments are valid
    if test x"$with_v4l" = "xauto"; then
       with_v4l=yes
    fi
    if test x"$with_v4l" = "xyes"; then
        AC_CHECK_HEADER([linux/videodev.h],
                        [
                          AC_DEFINE(HAVE_CAMV4L,,[V4L capturing support])
                          have_v4l=yes
                          have_v4l1or2=yes
                        ],
                        [ 
                          have_v4l=no
                          have_v4l1or2=no
                        ])
        AC_CHECK_HEADER([linux/videodev2.h],
                        [
                          AC_DEFINE(HAVE_CAMV4L2,,[V4L2 capturing support])
                          have_v4l2=yes
                          have_v4l1or2=yes
                        ],
                        [ have_v4l2=no ],
                [[
                #include <asm/types.h>
                #include <sys/time.h>
                ]])
    else
        # if we get here then --with-v4l was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-v4l, continuing assuming 'no'])
        have_v4l=no
        have_v4l2=no
        have_v4l1or2=no
    fi

fi
AM_CONDITIONAL([BUILD_V4L], [test x"$have_v4l1or2" = "xyes"])


######################################################################
# HighGUI dependencies for image I/O

SAVELIBS="$LIBS"
IMAGELIBS=""

AC_SUBST(IMAGELIBS)

have_jpeg=no
AC_CHECK_HEADER(jpeglib.h,
                AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
                             [
                               have_jpeg=yes
                               AC_DEFINE(HAVE_JPEG,,[IJG JPEG codec])
                               IMAGELIBS="$IMAGELIBS -ljpeg"
                             ]))

have_zlib=no
AC_CHECK_HEADER(zlib.h,
                AC_CHECK_LIB(z, gzopen,
                             [
                               have_zlib=yes
                               AC_DEFINE(HAVE_ZLIB,,[LZ77 compression/decompression library (used for PNG)])
                               IMAGELIBS="$IMAGELIBS -lz -lm"
                               LIBS="$LIBS -lz -lm"
                             ]))

have_png=no
AC_CHECK_HEADER(png.h, 
                [
                  AC_DEFINE(HAVE_PNG_H,,[png.h needs to be included])
                  have_png=yes
                ])
AC_CHECK_HEADER([libpng/png.h], 
                [
                  AC_DEFINE(HAVE_LIBPNG_PNG_H,,[libpng/png.h needs to be included])
                  have_png=yes
                ])
if test x"$have_png" = "xyes"; then
    AC_CHECK_LIB(png12, png_read_image,
                 [
                   have_png=yes
                   AC_DEFINE(HAVE_PNG,,[PNG codec])
                   IMAGELIBS="-lpng12 $IMAGELIBS"
                   LIBS="-lpng12 $LIBS"
                   AC_CHECK_FUNCS(png_get_valid png_set_tRNS_to_alpha)
                 ],
                 [ have_png=no ])
fi

have_tiff=no
AC_CHECK_HEADER(tiff.h,
                AC_CHECK_LIB(tiff, TIFFReadRGBAStrip,
                             [
                               have_tiff=yes
                               AC_DEFINE(HAVE_TIFF,,[TIFF codec])
                               IMAGELIBS="$IMAGELIBS -ltiff"
                               LIBS="$LIBS -ltiff"
                             ]))

have_jasper=no
AC_CHECK_HEADER(jasper/jasper.h,
                AC_CHECK_LIB(jasper, jas_image_readcmpt,
                             [
                               have_jasper=yes
                               AC_DEFINE(HAVE_JASPER,,[JPEG-2000 codec])
                               IMAGELIBS="$IMAGELIBS -ljasper"
                               LIBS="$LIBS -ljasper"
                             ]))

have_ilmimf=no
AC_CHECK_HEADER(ImfCRgbaFile.h,
                AC_CHECK_LIB(IlmImf, ImfInputReadPixels,
                             [
                               have_ilmimf=yes
                               AC_DEFINE(HAVE_ILMIMF,,[OpenEXR codec])
                               IMAGELIBS="$IMAGELIBS -lIlmImf -lIex -lHalf"
                               LIBS="$LIBS -lIlmImf -lIex -lHalf"
                             ],,
                             [ -lIex -lHalf ]))

# Restore original LIBS settings...
LIBS="$SAVELIBS"
AC_SUBST(IMAGELIBS)


######################################################################
# SWIG wrappers

# currently there is only python.
# If additional wrapper languages / SWIG modules
# get available for OpenCV, we will have a --with-LANGUAGE switch
# for every wrapper language
if test x"$with_python" = "xyes"; then
    AC_MSG_NOTICE([Checking for necessary tools to build python wrappers])

    # we need Python now
    AM_PATH_PYTHON()

    # get some info on how to compile and link python modules
    AZ_PYTHON_CSPEC()
    AZ_PYTHON_LSPEC()

    # if not explicitly forbidden, check for swig also
    if test x"$with_swig" = "xauto"; then
        with_swig=yes
    fi
    
    ### almost ok... just need to check if we have the Python headers ###

    # first, save the CPPFLAGS
    OLD_CPPFLAGS=$CPPFLAGS

    # then add the PYTHON path founded previously
    CPPFLAGS="$CPPFLAGS $PYTHON_CSPEC"

    # now, we can check
    AC_CHECK_HEADER(Python.h,
        [have_python=yes],
        [
          AC_MSG_WARN([Python headers not found, disabling python wrappers])
          have_python=no
        ])

    # restore the old CPPFLAGS
    CPPFLAGS=$OLD_CPPFLAGS

else
    # check if ./configure arguments are valid
    if test x"$with_python" = "xno"; then
        have_python=no
    else
        # if we get here then --with-python was not called with 'yes','no' or 'auto'
        AC_MSG_WARN([unexpected arguments for option --with-python, continuing assuming 'no'])
        have_python=no
    fi
fi
AM_CONDITIONAL([BUILD_PYTHON_WRAPPERS], [test x"$have_python" = "xyes"])

# check for swig itself
SWIG=""
if test x"$with_swig" = "xyes"; then
    AC_MSG_NOTICE([Checking for SWIG])

	# Python 2.5 requires SWIG >= 1.3.30
	AM_PYTHON_CHECK_VERSION( [2.5], have_python25=yes, have_python25=no )
	if test x"$have_python25" = "xyes" ; then
		AC_PATH_SWIG([1.3.30])
	else
		AC_PATH_SWIG([1.2.24])
	fi

    if test -n "$SWIG"; then
        SWIG_ENABLE_CXX()
        SWIG_MULTI_MODULE_SUPPORT()

        # check for swig python library
        SWIG_PYTHON()
        have_swig=yes
    else
		if test x"$have_python25" = "xyes"; then
			AC_MSG_WARN([Python Version >= 2.5 requires SWIG >= 1.3.30])
		fi
		have_swig=no
    fi
else
    if test x"$with_swig" = "xno"; then
        have_swig=no
    else
        if test x"$with_swig" = "xauto"; then
            # no (python) wrapper will be generated
            # we don't need to check for SWIG
            have_swig=no
        else
            # if we get here then --with-swig was not called with 'yes','no' or 'auto'
            AC_MSG_WARN([unexpected arguments for option --with-swig, continuing assuming 'no'])
            have_swig=no
        fi
    fi
fi
AM_CONDITIONAL([UPDATE_SWIG_WRAPPERS], [test x"$have_swig" = "xyes"])


######################################################################
# Parallelization
#
#CXXOPENMP="no"
#
#AC_ARG_WITH(openmp, dnl
#  [--with-openmp=COMPILER  use OpenMP supporting compiler [default=no] ],
#    [CXXOPENMP="$withval"],[CXXOPENMP="no"])
#if test "$CXXOPENMP" = "no"; then
#    CXXOPENMP="$CXX"
#fi
#
#AC_SUBST(CXXOPENMP)

AC_SUBST(DEBUG)

AC_CONFIG_FILES([Makefile
opencv.pc
opencv.spec
docs/Makefile
data/Makefile
cxcore/Makefile
cxcore/include/Makefile
cxcore/src/Makefile
cv/Makefile
cv/include/Makefile
cv/src/Makefile
cvaux/Makefile
cvaux/include/Makefile
cvaux/src/Makefile
ml/Makefile
ml/include/Makefile
ml/src/Makefile
otherlibs/Makefile
otherlibs/highgui/Makefile
apps/Makefile
apps/haartraining/Makefile
apps/haartraining/include/Makefile
apps/haartraining/src/Makefile
interfaces/Makefile
interfaces/swig/Makefile
interfaces/swig/filtered/Makefile
interfaces/swig/general/Makefile
interfaces/swig/python/Makefile
tests/Makefile
tests/python/Makefile
tests/cv/Makefile
tests/cv/src/Makefile
tests/cxts/Makefile
tests/cxcore/Makefile
tests/cxcore/src/Makefile
utils/Makefile
samples/Makefile
samples/c/Makefile
samples/python/Makefile
])

AC_OUTPUT

AC_MSG_RESULT([
General configuration ================================================
    Compiler:                 ${CXX} 
    CXXFLAGS:                 ${CXXFLAGS}
    
    Install path:             ${prefix}
    
HighGUI configuration ================================================

    Windowing system --------------
    Use Carbon / Mac OS X:    ${have_carbon}
    Use gtk+ 2.x:             ${have_gtk}
    Use gthread:              ${have_gthread}
    
    Image I/O ---------------------
    Use libjpeg:              ${have_jpeg}
    Use zlib:                 ${have_zlib}
    Use libpng:               ${have_png}
    Use libtiff:              ${have_tiff}
    Use libjasper:            ${have_jasper}
    Use libIlmImf:            ${have_ilmimf}
    
    Video I/O ---------------------
    Use QuickTime / Mac OS X: ${have_quicktime}
    Use xine:                 ${have_xine}
    Use ffmpeg:               ${have_ffmpeg}
    Use dc1394 & raw1394:     ${have_dc1394}
    Use v4l:                  ${have_v4l}
    Use v4l2:                 ${have_v4l2}
    
Wrappers for other languages =========================================
    SWIG                      ${SWIG}
    Python                    ${have_python}

Additional build settings ============================================
    Build demo apps           ${enable_apps}

Now run make ...
])

if test x"$have_xine" = "xyes"; then
    AC_MSG_NOTICE([
ATTENTION: highgui will be built with xine support,
           thus it will be a subject to GNU Public License])
fi
